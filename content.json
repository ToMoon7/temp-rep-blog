{"meta":{"title":"AHao's Blog","subtitle":"","description":"","author":"AHao","url":"http://blog.a-hao.cn","root":"/"},"pages":[],"posts":[{"title":"常用JS方法","slug":"常用JS方法","date":"2020-12-30T09:24:54.000Z","updated":"2020-12-30T09:31:17.313Z","comments":true,"path":"a646a9b1e023/","link":"","permalink":"http://blog.a-hao.cn/a646a9b1e023/","excerpt":"","text":"内容来自网络收集，如有侵权请联系删除 常用js方法isString (o) &#123; //是否字符串 return Object.prototype.toString.call(o).slice(8, -1) === &#x27;String&#x27;&#125;isNumber (o) &#123; //是否数字 return Object.prototype.toString.call(o).slice(8, -1) === &#x27;Number&#x27;&#125;isBoolean (o) &#123; //是否boolean return Object.prototype.toString.call(o).slice(8, -1) === &#x27;Boolean&#x27;&#125;isFunction (o) &#123; //是否函数 return Object.prototype.toString.call(o).slice(8, -1) === &#x27;Function&#x27;&#125;isNull (o) &#123; //是否为null return Object.prototype.toString.call(o).slice(8, -1) === &#x27;Null&#x27;&#125;isUndefined (o) &#123; //是否undefined return Object.prototype.toString.call(o).slice(8, -1) === &#x27;Undefined&#x27;&#125;isObj (o) &#123; //是否对象 return Object.prototype.toString.call(o).slice(8, -1) === &#x27;Object&#x27;&#125;isArray (o) &#123; //是否数组 return Object.prototype.toString.call(o).slice(8, -1) === &#x27;Array&#x27;&#125;isDate (o) &#123; //是否时间 return Object.prototype.toString.call(o).slice(8, -1) === &#x27;Date&#x27;&#125;isRegExp (o) &#123; //是否正则 return Object.prototype.toString.call(o).slice(8, -1) === &#x27;RegExp&#x27;&#125;isError (o) &#123; //是否错误对象 return Object.prototype.toString.call(o).slice(8, -1) === &#x27;Error&#x27;&#125;isSymbol (o) &#123; //是否Symbol函数 return Object.prototype.toString.call(o).slice(8, -1) === &#x27;Symbol&#x27;&#125;isPromise (o) &#123; //是否Promise对象 return Object.prototype.toString.call(o).slice(8, -1) === &#x27;Promise&#x27;&#125;isSet (o) &#123; //是否Set对象 return Object.prototype.toString.call(o).slice(8, -1) === &#x27;Set&#x27;&#125;isFalse (o) &#123; if (!o || o === &#x27;null&#x27; || o === &#x27;undefined&#x27; || o === &#x27;false&#x27; || o === &#x27;NaN&#x27;) return true return false&#125;isTrue (o) &#123; return !this.isFalse(o)&#125;isIos () &#123; var u = navigator.userAgent; if (u.indexOf(&#x27;Android&#x27;) &gt; -1 || u.indexOf(&#x27;Linux&#x27;) &gt; -1) &#123;//安卓手机 // return &quot;Android&quot;; return false &#125; else if (u.indexOf(&#x27;iPhone&#x27;) &gt; -1) &#123;//苹果手机 // return &quot;iPhone&quot;; return true &#125; else if (u.indexOf(&#x27;iPad&#x27;) &gt; -1) &#123;//iPad // return &quot;iPad&quot;; return false &#125; else if (u.indexOf(&#x27;Windows Phone&#x27;) &gt; -1) &#123;//winphone手机 // return &quot;Windows Phone&quot;; return false &#125;else&#123; return false &#125;&#125;isPC () &#123; //是否为PC端 var userAgentInfo = navigator.userAgent; var Agents = [&quot;Android&quot;, &quot;iPhone&quot;, &quot;SymbianOS&quot;, &quot;Windows Phone&quot;, &quot;iPad&quot;, &quot;iPod&quot;]; var flag = true; for (var v = 0; v &lt; Agents.length; v++) &#123; if (userAgentInfo.indexOf(Agents[v]) &gt; 0) &#123; flag = false; break; &#125; &#125; return flag;&#125;browserType()&#123; var userAgent = navigator.userAgent; //取得浏览器的userAgent字符串 var isOpera = userAgent.indexOf(&quot;Opera&quot;) &gt; -1; //判断是否Opera浏览器 var isIE = userAgent.indexOf(&quot;compatible&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;MSIE&quot;) &gt; -1 &amp;&amp; !isOpera; //判断是否IE浏览器 var isIE11 = userAgent.indexOf(&#x27;Trident&#x27;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;rv:11.0&quot;) &gt; -1; var isEdge = userAgent.indexOf(&quot;Edge&quot;) &gt; -1 &amp;&amp; !isIE; //判断是否IE的Edge浏览器 var isFF = userAgent.indexOf(&quot;Firefox&quot;) &gt; -1; //判断是否Firefox浏览器 var isSafari = userAgent.indexOf(&quot;Safari&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;Chrome&quot;) == -1; //判断是否Safari浏览器 var isChrome = userAgent.indexOf(&quot;Chrome&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;Safari&quot;) &gt; -1; //判断Chrome浏览器 if (isIE) &#123; var reIE = new RegExp(&quot;MSIE (\\\\d+\\\\.\\\\d+);&quot;); reIE.test(userAgent); var fIEVersion = parseFloat(RegExp[&quot;$1&quot;]); if(fIEVersion == 7) return &quot;IE7&quot; else if(fIEVersion == 8) return &quot;IE8&quot;; else if(fIEVersion == 9) return &quot;IE9&quot;; else if(fIEVersion == 10) return &quot;IE10&quot;; else return &quot;IE7以下&quot;//IE版本过低 &#125; if (isIE11) return &#x27;IE11&#x27;; if (isEdge) return &quot;Edge&quot;; if (isFF) return &quot;FF&quot;; if (isOpera) return &quot;Opera&quot;; if (isSafari) return &quot;Safari&quot;; if (isChrome) return &quot;Chrome&quot;;&#125;checkStr (str, type) &#123; switch (type) &#123; case &#x27;phone&#x27;: //手机号码 return /^1[3|4|5|6|7|8|9][0-9]&#123;9&#125;$/.test(str); case &#x27;tel&#x27;: //座机 return /^(0\\d&#123;2,3&#125;-\\d&#123;7,8&#125;)(-\\d&#123;1,4&#125;)?$/.test(str); case &#x27;card&#x27;: //身份证 return /(^\\d&#123;15&#125;$)|(^\\d&#123;18&#125;$)|(^\\d&#123;17&#125;(\\d|X|x)$)/.test(str); case &#x27;pwd&#x27;: //密码以字母开头，长度在6~18之间，只能包含字母、数字和下划线 return /^[a-zA-Z]\\w&#123;5,17&#125;$/.test(str) case &#x27;postal&#x27;: //邮政编码 return /[1-9]\\d&#123;5&#125;(?!\\d)/.test(str); case &#x27;QQ&#x27;: //QQ号 return /^[1-9][0-9]&#123;4,9&#125;$/.test(str); case &#x27;email&#x27;: //邮箱 return /^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$/.test(str); case &#x27;money&#x27;: //金额(小数点2位) return /^\\d*(?:\\.\\d&#123;0,2&#125;)?$/.test(str); case &#x27;URL&#x27;: //网址 return /(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:/~\\+#]*[\\w\\-\\@?^=%&amp;/~\\+#])?/.test(str) case &#x27;IP&#x27;: //IP return /((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))/.test(str); case &#x27;date&#x27;: //日期时间 return /^(\\d&#123;4&#125;)\\-(\\d&#123;2&#125;)\\-(\\d&#123;2&#125;) (\\d&#123;2&#125;)(?:\\:\\d&#123;2&#125;|:(\\d&#123;2&#125;):(\\d&#123;2&#125;))$/.test(str) || /^(\\d&#123;4&#125;)\\-(\\d&#123;2&#125;)\\-(\\d&#123;2&#125;)$/.test(str) case &#x27;number&#x27;: //数字 return /^[0-9]$/.test(str); case &#x27;english&#x27;: //英文 return /^[a-zA-Z]+$/.test(str); case &#x27;chinese&#x27;: //中文 return /^[\\u4E00-\\u9FA5]+$/.test(str); case &#x27;lower&#x27;: //小写 return /^[a-z]+$/.test(str); case &#x27;upper&#x27;: //大写 return /^[A-Z]+$/.test(str); case &#x27;HTML&#x27;: //HTML标记 return /&lt;(&quot;[^&quot;]*&quot;|&#x27;[^&#x27;]*&#x27;|[^&#x27;&quot;&gt;])*&gt;/.test(str); default: return true; &#125; // 严格的身份证校验 isCardID(sId) &#123; if (!/(^\\d&#123;15&#125;$)|(^\\d&#123;17&#125;(\\d|X|x)$)/.test(sId)) &#123; alert(&#x27;你输入的身份证长度或格式错误&#x27;) return false &#125; //身份证城市 var aCity=&#123;11:&quot;北京&quot;,12:&quot;天津&quot;,13:&quot;河北&quot;,14:&quot;山西&quot;,15:&quot;内蒙古&quot;,21:&quot;辽宁&quot;,22:&quot;吉林&quot;,23:&quot;黑龙江&quot;,31:&quot;上海&quot;,32:&quot;江苏&quot;,33:&quot;浙江&quot;,34:&quot;安徽&quot;,35:&quot;福建&quot;,36:&quot;江西&quot;,37:&quot;山东&quot;,41:&quot;河南&quot;,42:&quot;湖北&quot;,43:&quot;湖南&quot;,44:&quot;广东&quot;,45:&quot;广西&quot;,46:&quot;海南&quot;,50:&quot;重庆&quot;,51:&quot;四川&quot;,52:&quot;贵州&quot;,53:&quot;云南&quot;,54:&quot;西藏&quot;,61:&quot;陕西&quot;,62:&quot;甘肃&quot;,63:&quot;青海&quot;,64:&quot;宁夏&quot;,65:&quot;新疆&quot;,71:&quot;台湾&quot;,81:&quot;香港&quot;,82:&quot;澳门&quot;,91:&quot;国外&quot;&#125;; if(!aCity[parseInt(sId.substr(0,2))]) &#123; alert(&#x27;你的身份证地区非法&#x27;) return false &#125; // 出生日期验证 var sBirthday=(sId.substr(6,4)+&quot;-&quot;+Number(sId.substr(10,2))+&quot;-&quot;+Number(sId.substr(12,2))).replace(/-/g,&quot;/&quot;), d = new Date(sBirthday) if(sBirthday != (d.getFullYear()+&quot;/&quot;+ (d.getMonth()+1) + &quot;/&quot; + d.getDate())) &#123; alert(&#x27;身份证上的出生日期非法&#x27;) return false &#125; // 身份证号码校验 var sum = 0, weights = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2], codes = &quot;10X98765432&quot; for (var i = 0; i &lt; sId.length - 1; i++) &#123; sum += sId[i] * weights[i]; &#125; var last = codes[sum % 11]; //计算出来的最后一位身份证号码 if (sId[sId.length-1] != last) &#123; alert(&#x27;你输入的身份证号非法&#x27;) return false &#125; return true &#125;&#125;","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://blog.a-hao.cn/tags/Javascript/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-12-29T02:25:45.117Z","updated":"2020-12-29T02:25:45.117Z","comments":true,"path":"e3817ca23919/","link":"","permalink":"http://blog.a-hao.cn/e3817ca23919/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://blog.a-hao.cn/tags/Javascript/"}]}